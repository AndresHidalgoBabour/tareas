

NOTES
=====


  **Objects**

  Objects can be compared to real world objects (like a car, a spoon, a house,
  etc.. ) which have properties and a particular type. In Javascript (and
  other programming languages), an object is one of the complex data types,
  which have a list of keys and values:

  ```
    const car = {
        Model : 'Honda City',
        color: 'Red',
        owner: 'X1',
        yearOfManufacture: 2017
    };
  ```

  In the above example each item in the list is a property (e.g: Model, color,
  owner, year) of the object 'car'. The object can also have functions called as methods.

  The property name/key can be a string or a number.

  ```
    const age = {
        10: 'kids',
        30: 'smart and wise',
        100: 'very very experienced'
    };
  ```

  We use objects mostly to store data and for creating custom methods and
  functions. There are 2 ways we can create objects:
   1. Object Literals
   2. Object Constructors

  Via Object Literals:

  We just declare an object name and within {} define all the properties
  with its values:

  ```
    const myNewEmptyObject = {}

    const book = {
        name: 'Harry Potter Book1',
        author: 'J.K. Rowling',
        blurb: 'something magical... '
    };

    sayHello: function() {
        console.log('Hello There');
    };
  ```

  Via Object Constructors:

  Constructors are functions that are used for initialising new objects using
  the `new()` keyword. We can set the properties via the `object.propertyname` notation:

  ```
    const book  = new Object();
    book.name = 'Harry Potter Book1';
    book.author = 'J.K.Rowling';
  ```

  Accessing properties of an object:
   - Dot notation
   - Bracket notation

  ```
    const book = {
        name: 'Harry Potter Book1',
        author: 'J.K. Rowling',
        blurb: 'something magical... '
    };
  ```

  Dot notation is the most common way we access the objects. Most of the
  examples above use the dot notation. It follows the object-name.key-name syntax:

  ```
    console.log(book.name);
    console.log(book.author);
  ```

  Bracket notation follows the object-name[key-name] format:

  ```
    console.log(book['name']);
    console.log(book['author']);
    console.log(age[10]);
  ```

  Note: the property which is a number must use the bracket notation only.


  You can delete the properties of an object using the `delete` keyword:

  `delete book.blurb`

  The objects can contain any type of elements:

  const myObject = {
	p1: "Hello",
	p2: function() {console.log("hello"); },
	p3: 123,
	p4: {
	  p5: "Hellop5",
	},
	p6: [{p7: "Hellop7"}]
  }

  This syntaxis call JSON (JavaScript Object Notation).
  The principal use is describe things.

  myObject.p1 returns "Hello"
  myObject.p2 returns console.log("hello") so myObject.p2() returns "hello"
  myObject.p3 returns 123
  myObject.p4 returns {p5: "Hellop5"} so myObject.p4.p5 returns "Hellop5"
  myObject.p6 returns [...] so myObject.p6[0] returns {p7: "Hellop7"} so myObject.p6[0].p7 returns "Hellop7" 

  If I want to call p7, I need to write myObject.p6[0].p7 (If I write myobject.p7 returns error)!!

  The elements order doesn't matter (it's a difference whit the arrays), so I can write p6, p1, p4, etc. and call
  them in any order I want.
 
  Try to write this in the console.

  If I want to take only the keys or only the values:

  errors = {city: "There's an error", name: "There's an error"}

  Object.keys(errors) returns an array with all the keys in the object.

  Object.values(errors) returns an array with all the values in the object.

  Try to write this in the console.